'''
    https://leetcode.com/problems/minimum-area-rectangle/

    939. Minimum Area Rectangle

    You are given an array of points in the X-Y plane points where points[i] = [xi, yi].

    Return the minimum area of a rectangle formed from these points, with sides parallel to the X and Y axes.
    If there is not any such rectangle, return 0.
'''
import random

import math


class Solution:
    def getMinArea(self, point, pointsOfXCoord, pointsOfYCoord):
        xCoord, yCoord = point[0], point[1]

        # the given point is top left corner
        # A: first we find the points that have same y coord as our point but x coordinate > than our point
        topRightCornerOptions = [x for x in pointsOfYCoord[yCoord] if x > xCoord]

        # B: second we find the points that have same x coord as our point but y coordinate < than our point
        bottomLeftCornerOptions = [y for y in pointsOfXCoord[xCoord] if y < yCoord]

        # then we match these points together and try to see if we can find the 4th point C of the rectangle

        # to keep track of min area of rectangles generated by given point
        minArea = float('inf')

        for otherX in topRightCornerOptions:
            topRightCornerPoint = (otherX, yCoord)

            for otherY in bottomLeftCornerOptions:
                bottomLeftCornerPoint = (xCoord, otherY)

                # the 4th point here is (otherX, otherY)
                if otherY in pointsOfXCoord[otherX]:
                    # it means that we have the point (otherX, otherY)
                    # this is a valid rectangle, we need to get its area

                    # distance between point and topRightCornerPoint
                    width = int(abs(math.dist((xCoord, yCoord), topRightCornerPoint)))

                    # distance between point and bottomLeftCornerPoint
                    height = int(abs(math.dist((xCoord, yCoord), bottomLeftCornerPoint)))

                    minArea = min(minArea, width * height)

        return minArea

    def minAreaRect(self, points: [[int]]) -> int:
        # first we sort the points in ascending order of x coord and then y coord
        points.sort(key=lambda item: (item[0], item[1]))

        # we should take every point as if it's the top-left corner of the rectangle we're trying to form
        # which means that to find the other 3 points of the rectangle, we need to find points that are:
        # - A: same y coordinate as our point but x coordinate > than our point to be the top right corner
        # - B: same x coordinate as our point but y coordinate < than our point to be the bottom left corner
        # - C: after finding the the other 2 points, we are restricted in what the last point should be to have a correct rectangle
        #   the 3rd point should have same x coord as A and same y coord as B

        # to quickly gain access to the points with a given x or y coord, we create maps
        pointsOfYCoord = {}
        pointsOfXCoord = {}

        for point in points:
            pointXCoord, pointYCoord = point[0], point[1]

            if pointXCoord not in pointsOfXCoord:
                pointsOfXCoord[pointXCoord] = set()

            pointsOfXCoord[pointXCoord].add(pointYCoord)

            if pointYCoord not in pointsOfYCoord:
                pointsOfYCoord[pointYCoord] = set()

            pointsOfYCoord[pointYCoord].add(pointXCoord)

        minArea = float('inf')

        # now we begin to find our rectangles
        for point in points:
            pointMinArea = self.getMinArea(point, pointsOfXCoord, pointsOfYCoord)

            if not math.isinf(pointMinArea):
                minArea = min(minArea, pointMinArea)

        if math.isinf(minArea):
            # we couldn't find a solution
            return 0
        else:
            return minArea

print(Solution().minAreaRect(points = [[1,1],[1,3],[3,1],[3,3],[2,2]]))
print(Solution().minAreaRect(points = [[1,1],[1,3],[3,1],[3,3],[4,1],[4,3]]))

points = []

for _ in range(0, 500):
    point = [random.randint(0, 4 * (10 ** 4)), random.randint(0, 4 * (10 ** 4))]

    points.append(point)

print(points)

print(Solution().minAreaRect(points))